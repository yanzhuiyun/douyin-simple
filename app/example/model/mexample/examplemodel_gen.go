// Code generated by goctl. DO NOT EDIT!

package mexample

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	exampleFieldNames          = builder.RawFieldNames(&Example{})
	exampleRows                = strings.Join(exampleFieldNames, ",")
	exampleRowsExpectAutoSet   = strings.Join(stringx.Remove(exampleFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	exampleRowsWithPlaceHolder = strings.Join(stringx.Remove(exampleFieldNames, "`username`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	exampleModel interface {
		Insert(ctx context.Context, data *Example) (sql.Result, error)
		FindOne(ctx context.Context, username string) (*Example, error)
		Update(ctx context.Context, data *Example) error
		Delete(ctx context.Context, username string) error
	}

	defaultExampleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Example struct {
		Id       sql.NullInt64 `db:"id"`
		Username string        `db:"username"`
		Content  string        `db:"content"`
	}
)

func newExampleModel(conn sqlx.SqlConn) *defaultExampleModel {
	return &defaultExampleModel{
		conn:  conn,
		table: "`example`",
	}
}

func (m *defaultExampleModel) Delete(ctx context.Context, username string) error {
	query := fmt.Sprintf("delete from %s where `username` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, username)
	return err
}

func (m *defaultExampleModel) FindOne(ctx context.Context, username string) (*Example, error) {
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", exampleRows, m.table)
	var resp Example
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultExampleModel) Insert(ctx context.Context, data *Example) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, exampleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Username, data.Content)
	return ret, err
}

func (m *defaultExampleModel) Update(ctx context.Context, data *Example) error {
	query := fmt.Sprintf("update %s set %s where `username` = ?", m.table, exampleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Content, data.Username)
	return err
}

func (m *defaultExampleModel) tableName() string {
	return m.table
}
